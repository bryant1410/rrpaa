--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -781,8 +781,11 @@ enum mac80211_rate_control_flags {
 /* if you do need the rateset, then you have less space */
 #define IEEE80211_TX_INFO_RATE_DRIVER_DATA_SIZE 24
 
-/* maximum number of rate stages */
-#define IEEE80211_TX_MAX_RATES	4
+/* maximum number of rate stages within tx path */
+#define IEEE80211_TX_MAX_RATES	2
+
+/* maximum number of rate stages within status feedback in rx path */
+#define IEEE80211_TX_MAX_STATUS_RATES  4
 
 /* maximum number of rate table entries */
 #define IEEE80211_TX_RATE_TABLE_SIZE	4
@@ -802,18 +805,23 @@ enum mac80211_rate_control_flags {
  *
  * &struct ieee80211_tx_info contains an array of these structs
  * in the control information, and it will be filled by the rate
- * control algorithm according to what should be sent. For example,
- * if this array contains, in the format { <idx>, <count> } the
- * information
- *    { 3, 2 }, { 2, 2 }, { 1, 4 }, { -1, 0 }, { -1, 0 }
+ * control algorithm according to what should be sent. Within the
+ * tx-path this array is of size IEEE80211_TX_MAX_RATES while in
+ * the rx-path this array is of size IEEE80211_TX_MAX_STATUS_RATES.
+ * For rate control this reduces rate array is sufficient for the
+ * rate sampling annotation, as the remaining rates per frame are
+ * filled be a rate table lookup. For example, if this array
+ * contains, in the format { <idx>, <count> } the information
+ *    { 3, 2 }, { 2, 6 }
  * then this means that the frame should be transmitted
- * up to twice at rate 3, up to twice at rate 2, and up to four
- * times at rate 1 if it doesn't get acknowledged. Say it gets
+ * up to twice at rate 3, up to six times at rate 2, and up to those
+ * values filled in by the rate table lookup for the remaining rates.
+ * if the frame doesn not get acknowledged. Say it gets
  * acknowledged by the peer after the fifth attempt, the status
  * information should then contain
- *   { 3, 2 }, { 2, 2 }, { 1, 1 }, { -1, 0 } ...
- * since it was transmitted twice at rate 3, twice at rate 2
- * and once at rate 1 after which we received an acknowledgement.
+ *   { 3, 2 }, { 2, 3 }, { -1, 0 }, { -1, 0 }
+ * since it was transmitted twice at rate 3 and three times at rate 2
+ * after which we received an acknowledgement.
  */
 struct ieee80211_tx_rate {
 	s8 idx;
@@ -885,7 +893,7 @@ struct ieee80211_tx_info {
 					u8 use_cts_prot:1;
 					u8 short_preamble:1;
 					u8 skip_table:1;
-					/* 2 bytes free */
+					/* 8 bytes free */
 				};
 				/* only needed before rate control */
 				unsigned long jiffies;
@@ -900,7 +908,8 @@ struct ieee80211_tx_info {
 			u64 cookie;
 		} ack;
 		struct {
-			struct ieee80211_tx_rate rates[IEEE80211_TX_MAX_RATES];
+			struct ieee80211_tx_rate rates[
+				IEEE80211_TX_MAX_STATUS_RATES];
 			s32 ack_signal;
 			u8 ampdu_ack_len;
 			u8 ampdu_len;
@@ -910,7 +919,7 @@ struct ieee80211_tx_info {
 		} status;
 		struct {
 			struct ieee80211_tx_rate driver_rates[
-				IEEE80211_TX_MAX_RATES];
+				IEEE80211_TX_MAX_STATUS_RATES];
 			u8 pad[4];
 
 			void *rate_driver_data[
@@ -976,7 +985,7 @@ ieee80211_tx_info_clear_status(struct ie
 		     offsetof(struct ieee80211_tx_info, driver_rates));
 	BUILD_BUG_ON(offsetof(struct ieee80211_tx_info, status.rates) != 8);
 	/* clear the rate counts */
-	for (i = 0; i < IEEE80211_TX_MAX_RATES; i++)
+	for (i = 0; i < IEEE80211_TX_MAX_STATUS_RATES; i++)
 		info->status.rates[i].count = 0;
 
 	BUILD_BUG_ON(
--- a/net/mac80211/rc80211_minstrel.c
+++ b/net/mac80211/rc80211_minstrel.c
@@ -306,7 +306,7 @@ minstrel_tx_status(void *priv, struct ie
 
 	success = !!(info->flags & IEEE80211_TX_STAT_ACK);
 
-	for (i = 0; i < IEEE80211_TX_MAX_RATES; i++) {
+	for (i = 0; i < IEEE80211_TX_MAX_STATUS_RATES; i++) {
 		if (ar[i].idx < 0)
 			break;
 
@@ -316,7 +316,7 @@ minstrel_tx_status(void *priv, struct ie
 
 		mi->r[ndx].stats.attempts += ar[i].count;
 
-		if ((i != IEEE80211_TX_MAX_RATES - 1) && (ar[i + 1].idx < 0))
+		if ((i != IEEE80211_TX_MAX_STATUS_RATES - 1) && (ar[i + 1].idx < 0))
 			mi->r[ndx].stats.success += success;
 	}
 
--- a/drivers/net/wireless/ath/carl9170/tx.c
+++ b/drivers/net/wireless/ath/carl9170/tx.c
@@ -872,14 +872,14 @@ static void carl9170_tx_get_rates(struct
 {
 	struct ieee80211_tx_info *info;
 
-	BUILD_BUG_ON(IEEE80211_TX_MAX_RATES < CARL9170_TX_MAX_RATES);
+	BUILD_BUG_ON(IEEE80211_TX_MAX_RATES < (CARL9170_TX_MAX_RATES - 2));
 	BUILD_BUG_ON(IEEE80211_TX_MAX_RATES > IEEE80211_TX_RATE_TABLE_SIZE);
 
 	info = IEEE80211_SKB_CB(skb);
 
 	ieee80211_get_tx_rates(vif, sta, skb,
-			       info->control.rates,
-			       IEEE80211_TX_MAX_RATES);
+			       info->status.rates,
+			       IEEE80211_TX_MAX_STATUS_RATES);
 }
 
 static void carl9170_tx_apply_rateset(struct ar9170 *ar,
--- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/ampdu.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/ampdu.c
@@ -827,7 +827,7 @@ brcms_c_ampdu_rate_status(struct brcms_c
 	int i;
 
 	/* clear the rest of the rates */
-	for (i = 2; i < IEEE80211_TX_MAX_RATES; i++) {
+	for (i = 2; i < IEEE80211_TX_MAX_STATUS_RATES; i++) {
 		txrate[i].idx = -1;
 		txrate[i].count = 0;
 	}
--- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c
@@ -979,7 +979,7 @@ brcms_c_dotxstatus(struct brcms_c_info *
 		}
 
 		/* clear the rest of the rates */
-		for (i = 2; i < IEEE80211_TX_MAX_RATES; i++) {
+		for (i = 2; i < IEEE80211_TX_MAX_STATUS_RATES; i++) {
 			txrate[i].idx = -1;
 			txrate[i].count = 0;
 		}
--- a/drivers/net/wireless/st/cw1200/txrx.c
+++ b/drivers/net/wireless/st/cw1200/txrx.c
@@ -935,7 +935,7 @@ void cw1200_tx_confirm_cb(struct cw1200_
 				++tx_count;
 		}
 
-		for (i = 0; i < IEEE80211_TX_MAX_RATES; ++i) {
+		for (i = 0; i < IEEE80211_TX_MAX_STATUS_RATES; ++i) {
 			if (tx->status.rates[i].count >= tx_count) {
 				tx->status.rates[i].count = tx_count;
 				break;
@@ -945,7 +945,7 @@ void cw1200_tx_confirm_cb(struct cw1200_
 				tx->status.rates[i].flags |= ht_flags;
 		}
 
-		for (++i; i < IEEE80211_TX_MAX_RATES; ++i) {
+		for (++i; i < IEEE80211_TX_MAX_STATUS_RATES; ++i) {
 			tx->status.rates[i].count = 0;
 			tx->status.rates[i].idx = -1;
 		}
--- a/drivers/net/wireless/mac80211_hwsim.c
+++ b/drivers/net/wireless/mac80211_hwsim.c
@@ -1301,8 +1301,8 @@ static void mac80211_hwsim_tx(struct iee
 
 	if (ieee80211_hw_check(hw, SUPPORTS_RC_TABLE))
 		ieee80211_get_tx_rates(txi->control.vif, control->sta, skb,
-				       txi->control.rates,
-				       ARRAY_SIZE(txi->control.rates));
+				       txi->status.rates,
+				       ARRAY_SIZE(txi->status.rates));
 
 	txi->rate_driver_data[0] = channel;
 
@@ -1427,8 +1427,8 @@ static void mac80211_hwsim_tx_frame(stru
 	if (ieee80211_hw_check(hw, SUPPORTS_RC_TABLE)) {
 		struct ieee80211_tx_info *txi = IEEE80211_SKB_CB(skb);
 		ieee80211_get_tx_rates(txi->control.vif, NULL, skb,
-				       txi->control.rates,
-				       ARRAY_SIZE(txi->control.rates));
+				       txi->status.rates,
+				       ARRAY_SIZE(txi->status.rates));
 	}
 
 	mac80211_hwsim_monitor_rx(hw, skb, chan);
@@ -2817,7 +2817,7 @@ static int hwsim_tx_info_frame_received_
 
 	ieee80211_tx_info_clear_status(txi);
 
-	for (i = 0; i < IEEE80211_TX_MAX_RATES; i++) {
+	for (i = 0; i < IEEE80211_TX_MAX_STATUS_RATES; i++) {
 		txi->status.rates[i].idx = tx_attempts[i].idx;
 		txi->status.rates[i].count = tx_attempts[i].count;
 		/*txi->status.rates[i].flags = 0;*/
--- a/drivers/net/wireless/mediatek/mt7601u/mac.c
+++ b/drivers/net/wireless/mediatek/mt7601u/mac.c
@@ -62,9 +62,9 @@ mt76_mac_fill_tx_status(struct mt7601u_d
 	int cur_idx, last_rate;
 	int i;
 
-	last_rate = min_t(int, st->retry, IEEE80211_TX_MAX_RATES - 1);
+	last_rate = min_t(int, st->retry, IEEE80211_TX_MAX_STATUS_RATES - 1);
 	mt76_mac_process_tx_rate(&rate[last_rate], st->rate);
-	if (last_rate < IEEE80211_TX_MAX_RATES - 1)
+	if (last_rate < IEEE80211_TX_MAX_STATUS_RATES - 1)
 		rate[last_rate + 1].idx = -1;
 
 	cur_idx = rate[last_rate].idx + st->retry;
--- a/drivers/net/wireless/ralink/rt2x00/rt2x00dev.c
+++ b/drivers/net/wireless/ralink/rt2x00/rt2x00dev.c
@@ -406,7 +406,7 @@ void rt2x00lib_txdone(struct queue_entry
 	 * retry it lowered the rate 1 step except when the
 	 * lowest rate was used.
 	 */
-	for (i = 0; i < retry_rates && i < IEEE80211_TX_MAX_RATES; i++) {
+	for (i = 0; i < retry_rates && i < IEEE80211_TX_MAX_STATUS_RATES; i++) {
 		tx_info->status.rates[i].idx = rate_idx - i;
 		tx_info->status.rates[i].flags = rate_flags;
 
@@ -421,7 +421,7 @@ void rt2x00lib_txdone(struct queue_entry
 		}
 		tx_info->status.rates[i].count = 1;
 	}
-	if (i < (IEEE80211_TX_MAX_RATES - 1))
+	if (i < (IEEE80211_TX_MAX_STATUS_RATES - 1))
 		tx_info->status.rates[i].idx = -1; /* terminate */
 
 	if (!(tx_info->flags & IEEE80211_TX_CTL_NO_ACK)) {
--- a/drivers/net/wireless/zydas/zd1211rw/zd_mac.c
+++ b/drivers/net/wireless/zydas/zd1211rw/zd_mac.c
@@ -473,15 +473,15 @@ static void zd_mac_tx_status(struct ieee
 	info->status.rates[0].idx = retries->rate[0];
 	info->status.rates[0].count = 1; // (retry > 1 ? 2 : 1);
 
-	for (i=1; i<IEEE80211_TX_MAX_RATES-1 && i<retry; i++) {
+	for (i=1; i<IEEE80211_TX_MAX_STATUS_RATES-1 && i<retry; i++) {
 		info->status.rates[i].idx = retries->rate[i];
 		info->status.rates[i].count = 1; // ((i==retry-1) && success ? 1:2);
 	}
-	for (; i<IEEE80211_TX_MAX_RATES && i<retry; i++) {
+	for (; i<IEEE80211_TX_MAX_STATUS_RATES && i<retry; i++) {
 		info->status.rates[i].idx = retries->rate[retry - 1];
 		info->status.rates[i].count = 1; // (success ? 1:2);
 	}
-	if (i<IEEE80211_TX_MAX_RATES)
+	if (i<IEEE80211_TX_MAX_STATUS_RATES)
 		info->status.rates[i].idx = -1; /* terminate */
 
 	info->status.ack_signal = zd_check_signal(hw, ackssi);
--- a/net/mac80211/rc80211_minstrel_ht.c
+++ b/net/mac80211/rc80211_minstrel_ht.c
@@ -753,7 +753,7 @@ minstrel_ht_tx_status(void *priv, struct
 
 	last = !minstrel_ht_txstat_valid(mp, &ar[0]);
 	for (i = 0; !last; i++) {
-		last = (i == IEEE80211_TX_MAX_RATES - 1) ||
+		last = (i == IEEE80211_TX_MAX_STATUS_RATES - 1) ||
 		       !minstrel_ht_txstat_valid(mp, &ar[i + 1]);
 
 		rate = minstrel_ht_get_stats(mp, mi, &ar[i]);
--- a/net/mac80211/status.c
+++ b/net/mac80211/status.c
@@ -593,7 +593,7 @@ static int ieee80211_tx_get_rates(struct
 	int count = -1;
 	int i;
 
-	for (i = 0; i < IEEE80211_TX_MAX_RATES; i++) {
+	for (i = 0; i < IEEE80211_TX_MAX_STATUS_RATES; i++) {
 		if ((info->flags & IEEE80211_TX_CTL_AMPDU) &&
 		    !(info->flags & IEEE80211_TX_STAT_AMPDU)) {
 			/* just the first aggr frame carry status info */
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -973,9 +973,7 @@ ieee80211_tx_h_fragment(struct ieee80211
 			 * would completely throw off the NAV at other STAs.
 			 */
 			info->control.rates[1].idx = -1;
-			info->control.rates[2].idx = -1;
-			info->control.rates[3].idx = -1;
-			BUILD_BUG_ON(IEEE80211_TX_MAX_RATES != 4);
+			BUILD_BUG_ON(IEEE80211_TX_MAX_RATES != 2);
 			info->flags &= ~IEEE80211_TX_CTL_RATE_CTRL_PROBE;
 		} else {
 			hdr->frame_control &= ~morefrags;
